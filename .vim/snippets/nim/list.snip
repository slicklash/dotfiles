snippet takewh
abbr    List: takeWhile
options head
	template takeWhileIt*(s, pred: untyped): untyped =
		var result = newSeq[typeof(s[0])]()
		for it {.inject.} in items(s):
			if pred: result.add(it)
			else: break
		result
	${0}

snippet chunk
abbr    List: Chunks
options head
	proc chunks*[T](xs: openArray[T], size: Positive): seq[seq[T]] =
		var i = 0
		while i + size < xs.len:
			result.add(xs[i ..< i + size])
			i.inc(size)
		result.add(xs[i .. ^1])
	${0}

snippet perm
abbr    List: Permutation
options head
	proc permutations*[T](xs: openArray[T]): seq[seq[T]] =
		if xs.len() > 1:
			let head = xs[0]
			let tail = xs[1..^1]
			for sub in permutations(tail):
				for i in 0..xs.high():
					var p = @sub
					p.insert(@[head], i)
					result.add(p)
		else:
			result.add(@xs)
		${0}

snippet permr
abbr    List: Permutation with repetition
options head
	proc permutations*[T](xs: openArray[T], k: int, prefix: seq[T] = @[]): seq[seq[T]] =
		if k == 1:
			for x in xs:
				result.add(prefix & @[x])
			return result
		for x in xs:
			for p in permutations(xs, k - 1, prefix & @[x]):
				result.add(p)
	${0}

snippet comb
abbr    List: Combinations
options head
	proc combinations*[T](xs: openArray[T], k: int): seq[seq[T]] =
	if k == 0:
		return @[newSeq[T]()]
	if xs.len() == k:
		return @[@xs]
	let head = xs[0]
	let tail = xs[1..^1]
	for c in combinations(tail, k - 1):
		result.add(@[head] & c)
	result = result & combinations(tail, k)
	${0}

snippet cxct
abbr    List: CountTable
options head
	var cx: seq[CountTable[${1:char}]]
	for _ in 0 .. n:
		cx.add(initCountTable[$1]())
	${0}

snippet un2
abbr    Unpack: 2 tuple
options head
	let (${1:x}, ${2:y}) = (${3:xs}[0], $3[1])
	${0}

snippet un3
abbr    Unpack: 3 tuple
options head
	let (${1:x}, ${2:y}, ${3:z}) = (${4:xs}[0], $4[1], $4[2])
	${0}

snippet un4
abbr    Unpack: 4 tuple
options head
	let (${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}) = (${5:xs}[0], $5[1], $5[2], $5[3])
	${0}

snippet un6
abbr    Unpack: 6 tuple
options head
	let (${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:z1}, ${6:z2}) = (${7:xs}[0], $7[1], $7[2], $7[3], $7[4], $7[5])
	${0}

snippet it0
options word
	it[0]${0}

snippet it1
options word
	it[1]${0}

snippet itt
options word
	it[${1:2}]${0}

snippet 6it
options word
	(${1:it}[0], $1[1], $1[2], $1[3], $1[4], $1[5])${0}

snippet 5it
options word
	(${1:it}[0], $1[1], $1[2], $1[3], $1[4])${0}

snippet 4it
options word
	(${1:it}[0], $1[1], $1[2], $1[3])${0}

snippet 3it
options word
	(${1:it}[0], $1[1], $1[2])${0}

snippet 2it
options word
	(${1:it}[0], $1[1])${0}

